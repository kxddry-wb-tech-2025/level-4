services:
  backend:
    build: .
    restart: always
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - CONFIG_PATH=/app/config.yaml
    volumes:
      - ./config/local.yaml:/app/config.yaml
    expose:
      - 8080:8080
    depends_on:
      kafka:
        condition: service_healthy
      init-kafka:
        condition: service_completed_successfully
      db:
        condition: service_started
      migrator:
        condition: service_completed_successfully

  frontend:
    build: frontend
    expose: ["80:80"]

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - backend

  db:
    image: postgres
    restart: always
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=postgres
      - POSTGRES_DB=postgres
    volumes:
      - pgdata:/var/lib/postgresql/data
    expose: ["5432:5432"]
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 3s
      retries: 10

  migrator:
    image: migrate/migrate:v4.17.1
    container_name: migrator
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./docker/postgres:/migrations:ro
    command:
      - -path=/migrations
      - -database
      - postgres://$POSTGRES_USER:$POSTGRES_PASSWORD@postgres:5432/$POSTGRES_DB?sslmode=disable
      - up



  sender:
    build:
      context: .
      dockerfile: cmd/sender/Dockerfile
    ports:
      - "8085:8085"
    environment:
      - CONFIG_PATH=/app/config.yaml
    volumes:
      - ./config/sender.yaml:/app/config.yaml
    depends_on:
      init-kafka:
        condition: service_completed_successfully
      kafka:
        condition: service_healthy

  kafka:
      image: apache/kafka:latest
      hostname: kafka
      container_name: kafka
      ports:
        - "9092:9092"
        - "9093:9093"

      environment:
        KAFKA_BROKER_ID: 1
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
        KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
        KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
        KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
        KAFKA_PROCESS_ROLES: broker,controller
        KAFKA_NODE_ID: 1
        KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
        KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093,PLAINTEXT_HOST://0.0.0.0:29092
        KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
        KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
        KAFKA_LOG_DIRS: /var/lib/kafka/data
        CLUSTER_ID: test_id
      volumes:
        - kafka-data:/var/lib/kafka/data
      healthcheck:
        test: [ "CMD", "bash", "-c", "echo > /dev/tcp/localhost/9092" ]
        interval: 5s
        timeout: 2s
        retries: 10

  init-kafka:
      image: apache/kafka:latest
      depends_on:
        kafka:
          condition: service_healthy
      entrypoint: ["/bin/sh", "-c"]
      command: |
        "
        # blocks until kafka is reachable
        /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --list

        echo -e 'Creating kafka topics'
        /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic orders --replication-factor 1 --partitions 1
        /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic dlq --replication-factor 1 --partitions 1

        echo -e 'Following topics available:'
        /opt/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --list
        "

volumes:
  pgdata:
  kafka-data: